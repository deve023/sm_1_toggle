/** Generated by itemis CREATE code generator. */

#include "Statechart.h"

/*! \file
Implementation of the state machine 'Statechart'
*/




Statechart::Statechart() :
	counter1Max_raised(false),
	counter2Max_raised(false),
	viMyCounter1(0),
	viMyCounter2(0),
	timerService(sc_null),
	isExecuting(false)
{
	for (sc_ushort state_vec_pos = 0; state_vec_pos < maxOrthogonalStates; ++state_vec_pos)
		stateConfVector[state_vec_pos] = Statechart_last_state;
	
	clearInEvents();
}

Statechart::~Statechart()
{
	while (!inEventQueue.empty()) {
		statechart_events::SctEvent* nextEvent = inEventQueue.front();
		inEventQueue.pop_front();
		delete nextEvent;
	}
}


using namespace statechart_events;

SctEvent* Statechart::getNextEvent()
{
	SctEvent* nextEvent = 0;
	
	if(!inEventQueue.empty()) {
		nextEvent = inEventQueue.front();
		inEventQueue.pop_front();
	}
	
	return nextEvent;
}

sc_boolean Statechart::dispatch_event(SctEvent * event)
{
	if(event == 0) {
		return false;
	}
	switch(event->name)
	{
		case counter1Max:
		case counter2Max:
		{
			return iface_dispatch_event(event);
		}
		case Statechart_Toggle_Toggle_LED1_time_event_0:
		{
			delete event;
			return timeEvents[0] = true;
		}
		case Statechart_Toggle_Toggle_LED2_time_event_0:
		{
			delete event;
			return timeEvents[1] = true;
		}
		default:
			delete event;
			return false;
	}
}

sc_boolean Statechart::iface_dispatch_event(SctEvent * event)
{
	switch(event->name)
	{
		case counter1Max:
		{
			internal_raiseCounter1Max();
			break;
		}
		case counter2Max:
		{
			internal_raiseCounter2Max();
			break;
		}
		default:
			delete event;
			return false;
	}
	delete event;
	return true;
}
sc_boolean Statechart::internal_dispatch_event(SctEvent * event)
{
	switch(event->name)
	{
		default:
			delete event;
			return false;
	}
	delete event;
	return true;
}

StatechartEventName Statechart::getTimedEventName(sc_eventid evid)
{
	if (evid == (sc_eventid)(&timeEvents[0])) {
		return Statechart_Toggle_Toggle_LED1_time_event_0;
	}
	if (evid == (sc_eventid)(&timeEvents[1])) {
		return Statechart_Toggle_Toggle_LED2_time_event_0;
	}
	return invalid_event;
}



sc_boolean Statechart::isActive() const
{
	return stateConfVector[0] != Statechart_last_state;
}

/* 
 * Always returns 'false' since this state machine can never become final.
 */
sc_boolean Statechart::isFinal() const
{
	   return false;
}

sc_boolean Statechart::check(){
	if(timerService == sc_null) {
		return false;
	}
	return true;
}


void Statechart::setTimerService(sc::timer::TimerServiceInterface* timerService_)
{
	this->timerService = timerService_;
}

sc::timer::TimerServiceInterface* Statechart::getTimerService()
{
	return timerService;
}

sc_integer Statechart::getNumberOfParallelTimeEvents() {
	return parallelTimeEventsCount;
}

void Statechart::raiseTimeEvent(sc_eventid evid)
{
	if ((evid >= (sc_eventid)timeEvents) && (evid < (sc_eventid)(&timeEvents[timeEventsCount])))
	{
		inEventQueue.push_back(new TimedSctEvent(getTimedEventName(evid)));
		runCycle();
	}
}


sc_boolean Statechart::isStateActive(StatechartStates state) const
{
	switch (state)
	{
		case Toggle_Toggle_LED1 :
		{
			return (sc_boolean) (stateConfVector[SCVI_TOGGLE_TOGGLE_LED1] == Toggle_Toggle_LED1);
			break;
		}
		case Toggle_Toggle_LED2 :
		{
			return (sc_boolean) (stateConfVector[SCVI_TOGGLE_TOGGLE_LED2] == Toggle_Toggle_LED2);
			break;
		}
		default:
		{
			/* State is not active*/
			return false;
			break;
		}
	}
}

/* Functions for event counter1Max in interface  */
void Statechart::raiseCounter1Max()
{
	inEventQueue.push_back(new SctEvent__counter1Max(counter1Max));
        runCycle();
}
void Statechart::internal_raiseCounter1Max()
{
	counter1Max_raised = true;
}
/* Functions for event counter2Max in interface  */
void Statechart::raiseCounter2Max()
{
	inEventQueue.push_back(new SctEvent__counter2Max(counter2Max));
        runCycle();
}
void Statechart::internal_raiseCounter2Max()
{
	counter2Max_raised = true;
}

// implementations of all internal functions
/* Entry action for state 'Toggle LED1'. */
void Statechart::enact_Toggle_Toggle_LED1()
{
	/* Entry action for state 'Toggle LED1'. */
	timerService->setTimer(this, (sc_eventid)(&timeEvents[0]), 500, false);
	opLed1Update();
	viMyCounter1++;
}

/* Entry action for state 'Toggle LED2'. */
void Statechart::enact_Toggle_Toggle_LED2()
{
	/* Entry action for state 'Toggle LED2'. */
	timerService->setTimer(this, (sc_eventid)(&timeEvents[1]), 1000, false);
	opLed2Update();
	viMyCounter2++;
}

/* Exit action for state 'Toggle LED1'. */
void Statechart::exact_Toggle_Toggle_LED1()
{
	/* Exit action for state 'Toggle LED1'. */
	timerService->unsetTimer(this, (sc_eventid)(&timeEvents[0]));
}

/* Exit action for state 'Toggle LED2'. */
void Statechart::exact_Toggle_Toggle_LED2()
{
	/* Exit action for state 'Toggle LED2'. */
	timerService->unsetTimer(this, (sc_eventid)(&timeEvents[1]));
}

/* 'default' enter sequence for state Toggle LED1 */
void Statechart::enseq_Toggle_Toggle_LED1_default()
{
	/* 'default' enter sequence for state Toggle LED1 */
	enact_Toggle_Toggle_LED1();
	stateConfVector[0] = Toggle_Toggle_LED1;
}

/* 'default' enter sequence for state Toggle LED2 */
void Statechart::enseq_Toggle_Toggle_LED2_default()
{
	/* 'default' enter sequence for state Toggle LED2 */
	enact_Toggle_Toggle_LED2();
	stateConfVector[0] = Toggle_Toggle_LED2;
}

/* 'default' enter sequence for region Toggle */
void Statechart::enseq_Toggle_default()
{
	/* 'default' enter sequence for region Toggle */
	react_Toggle__entry_Default();
}

/* Default exit sequence for state Toggle LED1 */
void Statechart::exseq_Toggle_Toggle_LED1()
{
	/* Default exit sequence for state Toggle LED1 */
	stateConfVector[0] = Statechart_last_state;
	exact_Toggle_Toggle_LED1();
}

/* Default exit sequence for state Toggle LED2 */
void Statechart::exseq_Toggle_Toggle_LED2()
{
	/* Default exit sequence for state Toggle LED2 */
	stateConfVector[0] = Statechart_last_state;
	exact_Toggle_Toggle_LED2();
}

/* Default exit sequence for region Toggle */
void Statechart::exseq_Toggle()
{
	/* Default exit sequence for region Toggle */
	/* Handle exit of all possible states (of Statechart.Toggle) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case Toggle_Toggle_LED1 :
		{
			exseq_Toggle_Toggle_LED1();
			break;
		}
		case Toggle_Toggle_LED2 :
		{
			exseq_Toggle_Toggle_LED2();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default react sequence for initial entry  */
void Statechart::react_Toggle__entry_Default()
{
	/* Default react sequence for initial entry  */
	opLedInit();
	viMyCounter1 = 0;
	viMyCounter2 = 0;
	enseq_Toggle_Toggle_LED1_default();
}

sc_integer Statechart::react(const sc_integer transitioned_before) {
	/* State machine reactions. */
	return transitioned_before;
}

sc_integer Statechart::Toggle_Toggle_LED1_react(const sc_integer transitioned_before) {
	/* The reactions of state Toggle LED1. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if ((viMyCounter1) >= (20))
		{ 
			exseq_Toggle_Toggle_LED1();
			enseq_Toggle_Toggle_LED2_default();
			react(0);
			transitioned_after = 0;
		}  else
		{
			if (timeEvents[0])
			{ 
				exseq_Toggle_Toggle_LED1();
				timeEvents[0] = false;
				enseq_Toggle_Toggle_LED1_default();
				react(0);
				transitioned_after = 0;
			} 
		}
	} 
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* If no transition was taken then execute local reactions */
		transitioned_after = react(transitioned_before);
	} 
	return transitioned_after;
}

sc_integer Statechart::Toggle_Toggle_LED2_react(const sc_integer transitioned_before) {
	/* The reactions of state Toggle LED2. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if ((viMyCounter1) >= (10))
		{ 
			exseq_Toggle_Toggle_LED2();
			enseq_Toggle_Toggle_LED1_default();
			react(0);
			transitioned_after = 0;
		}  else
		{
			if (timeEvents[1])
			{ 
				exseq_Toggle_Toggle_LED2();
				timeEvents[1] = false;
				enseq_Toggle_Toggle_LED2_default();
				react(0);
				transitioned_after = 0;
			} 
		}
	} 
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* If no transition was taken then execute local reactions */
		transitioned_after = react(transitioned_before);
	} 
	return transitioned_after;
}

void Statechart::clearInEvents() {
	counter1Max_raised = false;
	counter2Max_raised = false;
	timeEvents[0] = false;
	timeEvents[1] = false;
}

void Statechart::microStep() {
	switch(stateConfVector[ 0 ])
	{
		case Toggle_Toggle_LED1 :
		{
			Toggle_Toggle_LED1_react(-1);
			break;
		}
		case Toggle_Toggle_LED2 :
		{
			Toggle_Toggle_LED2_react(-1);
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

void Statechart::runCycle() {
	/* Performs a 'run to completion' step. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	dispatch_event(getNextEvent());
	do
	{ 
		microStep();
		clearInEvents();
	} while (dispatch_event(getNextEvent()));
	isExecuting = false;
}

void Statechart::enter() {
	/* Activates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default enter sequence for statechart Statechart */
	enseq_Toggle_default();
	isExecuting = false;
}

void Statechart::exit() {
	/* Deactivates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default exit sequence for statechart Statechart */
	exseq_Toggle();
	isExecuting = false;
}

/* Can be used by the client code to trigger a run to completion step without raising an event. */
void Statechart::triggerWithoutEvent() {
	runCycle();
}

